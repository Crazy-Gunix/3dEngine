#!/usr/bin/env python3


"""Copyright 2022 Jacob Gibson

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http:#www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

from sys import exit as sys_exit
from shutil import copy, move
from subprocess import run

app_name = "3dEngine"
app_dir = f"{app_name}.AppDir"

build_folder="build_folder"
build_system = "Ninja"

clean_build = False



def IsTool(name):
    from shutil import which

    return which(name) is not None

def CheckDeps():
  global build_system

  if not IsTool("ninja"):
    build_system="Unix Makefiles"
  if not IsTool("make"):
    print("Error: make is not installed.")
    sys_exit(1)

def Clean():
  from shutil import rmtree
  from os import remove

  try:
    remove(app_name)
  except OSError: pass
  try:
    remove(f"{app_name}.7z")
  except OSError: pass

  rmtree(app_dir, ignore_errors=True)
  if clean_build:
    rmtree(build_folder, ignore_errors=True)

def GenerateCmake():
  run(["cmake", '.',
       "-B", build_folder,
       "-G", build_system,

# Assimp
       "-DASSIMP_BUILD_TESTS=OFF",
       "-DASSIMP_INSTALL=OFF",
# GLFW
       "-DGLFW_BUILD_EXAMPLES=OFF",
       "-DGLFW_BUILD_TESTS=OFF",
       "-DGLFW_BUILD_DOCS=OFF",
       "-DGLFW_INSTALL=OFF",
# GLM
#       "-DGLM_TEST_ENABLE=OFF",
# JsonCPP
       "-DJSONCPP_WITH_TESTS=OFF",
       "-DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF",
       "-DJSONCPP_WITH_PKGCONFIG_SUPPORT=OFF",
       "-DJSONCPP_WITH_CMAKE_PACKAGE=OFF",
       "-DBUILD_OBJECT_LIBS=OFF",
# Sndfile
       "-DBUILD_PROGRAMS=OFF",
       "-DBUILD_EXAMPLES=OFF",
       "-DENABLE_CPACK=OFF",
       "-DENABLE_PACKAGE_CONFIG=OFF",
       "-DINSTALL_PKGCONFIG_MODULE=OFF",
       "-DBUILD_TESTING=OFF",
# Lua
       "-DLUA_ENABLE_SHARED=OFF",
       "-DLUA_ENABLE_TESTING=OFF",
# OpenAL Soft
       "-DALSOFT_UTILS=OFF",
       "-DALSOFT_EXAMPLES=OFF",
       "-DALSOFT_INSTALL=OFF",
       "-DALSOFT_INSTALL_CONFIG=OFF",
       "-DALSOFT_INSTALL_HRTF_DATA=OFF",
       "-DALSOFT_INSTALL_AMBDEC_PRESETS=OFF",
       "-DALSOFT_INSTALL_EXAMPLES=OFF",
       "-DALSOFT_INSTALL_UTILS=OFF",
       "-DALSOFT_UPDATE_BUILD_VERSION=OFF",
       "-DLIBTYPE=STATIC",
# ALL
       "-DBUILD_SHARED_LIBS=OFF"
  ])

def BuildProject():
  GenerateCmake()

  if build_system == "Ninja":
    run(["ninja", "-C", build_folder])
    return
  
  run(["make", "-C", build_folder])

def SetupAppDir():
  from shutil import copytree
  from pathlib import Path

  Path(f"{app_dir}/usr/bin").mkdir(parents=True)
  Path(f"{app_dir}/usr/lib").mkdir()

  copytree("shaders/", f"{app_dir}/shaders/")
  try:
    copytree("assets/", f"{app_dir}/assets/")
  except: pass

  copy(f"config/{app_name}.desktop", f"{app_dir}/{app_name}.desktop")
  copy(f"config/face.png", f"{app_dir}/{app_name}-512x512.png")
  copy(f"config/AppRun", f"{app_dir}/AppRun")
  
  move(app_name, f"{app_dir}/usr/bin/{app_name}")

def BuildAppImage():
  from os import environ

  SetupAppDir()

  environ["ARCH"] = "x86_64"
  run(["./tools/appimagetool-x86_64", app_dir])

  move(f"{app_name}-x86_64.AppImage", app_name)



def Main():
  from platform import system

  CheckDeps()

  Clean()

  BuildProject()

  if system() == "Windows":
    copy(f"{build_folder}/bin/{app_name}.exe", f"{app_name}.exe")
    run(["7z", 'a', f"{app_name}.7z", f"{app_name}.exe", "scripts"])
    return
  
  copy(f"{build_folder}/bin/{app_name}", app_name)

  if system() == "Linux":
    BuildAppImage()
  
  run(["7z", 'a', f"{app_name}.7z", app_name, "scripts"])

if __name__ == "__main__":
  Main()
  sys_exit(0)
